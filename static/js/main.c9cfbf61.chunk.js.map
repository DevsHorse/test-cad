{"version":3,"sources":["model/board/InteractiveBoard.ts","model/board/Board.ts","model/render/IntersectPointRenderer.ts","model/elements/Point.ts","model/render/LineRenderer.ts","model/elements/Line.ts","model/elements/LineElement.ts","model/Document.ts","model/AppBoard.ts","App.tsx","index.tsx"],"names":["InteractiveBoard","canvas","realMousePosition","x","y","startDraw","isCollapsed","addEventListener","e","mouseClick","mouseMove","contextmenuClick","this","canvasBCR","getBoundingClientRect","clientX","left","clientY","top","preventDefault","_canvas","_ctx","getContext","width","height","lineWidth","fillStyle","clearRect","IntersectPointRenderer","element","_element","board","ctx","beginPath","arc","Math","PI","fill","stroke","Point","_renderer","LineRenderer","moveTo","p1","lineTo","p2","Line","_p1","_p2","offset","B","A","line","point","getCrossLinePoint","between","x1","y1","x2","y2","x3","y3","x4","y4","a1","b1","a2","b2","d","c1","c2","value","a","b","Eps","min","apply","max","lineElements","res","i","length","j","getCrossPoint","push","LineElement","_line","s1","getPointOffset","s2","Document","_elements","_intersectPoints","getLinesIntersects","el","setPoints","pop","elements","clear","renderer","render","AppBoard","_document","addNewLine","startPoint","addElement","moveLastLine","deleteLastElement","toggleEventsDisable","animId","requestAnimationFrame","animation","shorten","setTimeout","cancelAnimationFrame","App","props","canvasWrapper","collapseHandler","bind","document","createElement","setSettings","appendChild","className","ref","node","onClick","React","Component","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9cfbf61.chunk.js","sourcesContent":["import Board from \"./Board\";\nimport MouseListener from \"./MouseListener\";\n\n\nexport default class InteractiveBoard extends Board implements MouseListener {\n    public realMousePosition: {x: number, y: number} = {x: 0, y: 0};\n    public startDraw: boolean = false;\n    public isCollapsed: boolean = false;\n\n    constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        this.canvas.addEventListener(\"click\", e=>this.mouseClick(e));\n        this.canvas.addEventListener(\"mousemove\", e=>this.mouseMove(e));\n        this.canvas.addEventListener('contextmenu', e=>this.contextmenuClick(e));\n    }\n\n    mouseClick(e: MouseEvent) {\n        this.startDraw = !this.startDraw;\n    }\n\n    mouseMove(e: MouseEvent) {\n        const canvasBCR = this.canvas.getBoundingClientRect();\n        this.realMousePosition = {x: e.clientX - canvasBCR.left, y: e.clientY - canvasBCR.top};\n    }\n\n    contextmenuClick(e: MouseEvent){\n        e.preventDefault()\n        this.startDraw = false;\n    }\n\n    toggleEventsDisable() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n}","import LineElement from \"../elements/LineElement\";\nimport Point from \"../elements/Point\";\n\n\nexport default class Board {\n    private readonly _canvas: HTMLCanvasElement;\n    private readonly _ctx: CanvasRenderingContext2D | null;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this._canvas = canvas;\n        this._ctx = this._canvas.getContext('2d');\n    }\n\n    get canvas(){\n        return this._canvas;\n    }\n\n    get ctx() {\n        return this._ctx;\n    }\n\n    setSettings(width: number, height: number) {\n        if (this._ctx) {\n            this._ctx.canvas.width = width;\n            this._ctx.canvas.height = height;\n            this._ctx.lineWidth = 1;\n            this._ctx.fillStyle = '#f11d1d';\n        }\n    }\n\n    clear(){\n        if (!this._ctx) return;\n        this._ctx.clearRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height);\n    }\n}","import Renderable from \"./Renderable\";\nimport Board from \"../board/Board\";\nimport Point from '../elements/Point'\n\n\nexport default class IntersectPointRenderer implements Renderable{\n    private _element: Point;\n\n    constructor(element: Point) {\n        this._element = element;\n    }\n\n    render(board: Board) {\n        const ctx = board.ctx;\n        if (ctx==null) return;\n        ctx.beginPath ();\n        ctx.arc (this._element.x, this._element.y, 5, 0, Math.PI * 2, false);\n        ctx.fill();\n        ctx.stroke();\n    }\n}","import IntersectPointRenderer from '../render/IntersectPointRenderer';\n\nexport default class Point {\n    public x: number;\n    public y: number;\n    private _renderer: IntersectPointRenderer = new IntersectPointRenderer(this);\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    get renderer(){\n        return this._renderer;\n    }\n}","import Renderable from \"./Renderable\";\nimport Board from \"../board/Board\";\nimport LineElement from '../elements/LineElement'\n\n\nexport default class LineRenderer implements Renderable{\n    private _element: LineElement;\n\n    constructor(element:LineElement) {\n        this._element = element;\n    }\n\n    render(board: Board) {\n      const ctx = board.ctx;\n      if (ctx==null) return;\n      ctx.beginPath();\n      ctx.moveTo(this._element.p1.x, this._element.p1.y);\n      ctx.lineTo(this._element.p2.x, this._element.p2.y);\n      ctx.stroke();    \n    }\n}","import Point from \"./Point\";\nimport LineElement from \"./LineElement\";\n\n\nexport default class Line {\n    public _p1:Point;\n    public _p2:Point;\n\n    constructor(p1: Point, p2: Point){\n        this._p1=p1;\n        this._p2=p2;\n    }\n\n    get A(){\n        return this._p2.y-this._p1.y;\n    }\n\n    get B(){\n        return this._p2.x-this._p1.x;\n    }\n\n    getPointOffset(offset: number){\n        return new Point(this._p1.x + this.B*offset, this._p1.y + this.A*offset);\n    }\n\n    static getLinesIntersects(lineElements: Array<LineElement>): Array<Point> {\n        let res = [];\n        for (let i=0; i<lineElements.length; i++) {\n            for (let j=i+1; j<lineElements.length; j++) {\n                const point = lineElements[i].line.getCrossPoint(lineElements[j].line);\n                if (point) res.push(point);\n            }\n        }\n        return res;\n    }\n\n    private getCrossPoint(line: Line){\n        let point = this.getCrossLinePoint(line);\n        if(point){\n            if( this.between(point.x,this._p1.x, this._p2.x) && this.between(point.x,line._p1.x, line._p2.x) &&\n                this.between(point.y,this._p1.y, this._p2.y) && this.between(point.y,line._p1.y, line._p2.y)) {\n                return point;\n            }\n        }\n        return null;\n    }\n\n    private getCrossLinePoint(line: Line): Point | null {\n        let x1 = this._p1.x;\n        let y1 = this._p1.y;\n        let x2 = this._p2.x;\n        let y2 = this._p2.y;\n        let x3 = line._p1.x;\n        let y3 = line._p1.y;\n        let x4 = line._p2.x;\n        let y4 = line._p2.y;\n\n        let a1 = y1 - y2;\n        let b1 = x2 - x1;\n        let a2 = y3 - y4;\n        let b2 = x4 - x3;\n\n        let d = a1 * b2 - a2 * b1;\n        if( d != 0 ) {\n            let c1 = y2 * x1 - x2 * y1;\n\n            let c2 = y4 * x3 - x4 * y3;\n            let x = (b1 * c2 - b2 * c1) / d;\n            let y = (a2 * c1 - a1 * c2) / d;\n            return new Point(x, y);\n        }\n        return null;\n    }\n\n    private between(value: number, a: number, b: number, Eps = 1E-3) {\n        let min = Math.min.apply(Math, [a, b]),\n            max = Math.max.apply(Math, [a, b]);\n        return value + Eps > min && value < max + Eps;\n    }\n}","import Point from \"./Point\";\nimport LineRenderer from '../render/LineRenderer';\nimport Line from \"./Line\";\n\n\nexport default class LineElement {\n    private _line: Line;\n    private _renderer: LineRenderer = new LineRenderer(this);\n\n    constructor(p1: Point, p2: Point) {\n        this._line = new Line(p1, p2);\n    }\n\n    get p1() {\n        return this._line._p1;\n    }\n\n    get p2() {\n        return this._line._p2;\n    }\n\n    set p1(point: Point){\n        this._line._p1 = point;\n    }\n\n    set p2(point: Point){\n        this._line._p2 = point;\n    }\n\n    get line(){\n        return this._line;\n    }\n\n    get renderer(){\n        return this._renderer;\n    }\n\n    shorten(offset: number) {\n        const s1 = this._line.getPointOffset(offset);\n        const s2 = this._line.getPointOffset(1 - offset);\n        this.p1 = s1;\n        this.p2 = s2;\n    }\n}","import LineElement from \"./elements/LineElement\";\nimport Board from \"./board/Board\";\nimport Renderable from \"./render/Renderable\";\nimport Point from \"./elements/Point\";\nimport Line from \"./elements/Line\";\n\n\nexport default class Document implements Renderable {\n    private _elements: Array<LineElement> = [];\n    private _intersectPoints: Array<Point> = [];\n\n    get lastElement() {\n        return this._elements[this._elements.length - 1];\n    }\n\n    get elements() {\n        return this._elements;\n    }\n\n    setPoints() {\n        this._intersectPoints = Line.getLinesIntersects(this._elements);\n    }\n\n    addElement(el: LineElement) {\n        this._elements.push(el);\n    }\n\n    moveLastLine(point: Point){\n        this._elements[this._elements.length - 1].p2 = point;\n        this.setPoints();\n    }\n\n    deleteLastElement() {\n        this._elements.pop();\n        this.setPoints();\n    }\n\n    clear() {\n        this._elements = [];\n    }\n\n    render(board: Board) {\n        const elements = [...this._elements, ...this._intersectPoints];\n        board.clear();\n        for (let el of elements) {\n            el.renderer.render(board);\n        }\n    }\n}","import InteractiveBoard from \"./board/InteractiveBoard\";\nimport Point from \"./elements/Point\";\nimport Line from \"./elements/LineElement\";\nimport Document from \"./Document\";\n\nexport default class AppBoard extends InteractiveBoard {\n    private _document: Document = new Document();\n\n    mouseClick(e: MouseEvent) {\n        if (this.isCollapsed) return;\n        if (!this.startDraw) {\n            this.addNewLine();\n        }\n        super.mouseClick(e);\n    }\n\n    addNewLine() {\n        const startPoint = new Point(this.realMousePosition.x, this.realMousePosition.y);\n        const line = new Line(startPoint, startPoint);\n        this._document.addElement(line);\n    }\n\n    mouseMove(e: MouseEvent) {\n        if (this.isCollapsed) return;\n        super.mouseMove(e);\n        if (this.startDraw) {\n            this._document.moveLastLine(new Point(this.realMousePosition.x, this.realMousePosition.y));\n        }\n        this.render();\n    }\n\n    contextmenuClick(e:MouseEvent){\n        if (this.startDraw) {\n            this._document.deleteLastElement();\n        }\n        super.contextmenuClick(e);\n    }\n\n    collapseHandler() {\n        if (this.isCollapsed) return;\n        this.toggleEventsDisable();\n        const step = 0.5 / 30;\n        let animId:any=null;\n        const animation = () => {\n            animId = requestAnimationFrame(animation);\n            for (let el of this._document.elements) {\n                el.shorten(step);\n            }\n            this._document.setPoints();\n            this.render();\n        }\n        animId = requestAnimationFrame(animation);\n        setTimeout(()=>{\n            cancelAnimationFrame(animId);\n            this._document.clear();\n            this.render();\n            this.toggleEventsDisable();\n        }, 3000);\n    }\n\n   \n\n    render() {\n        if (this._document) {\n            this._document.render(this);\n        }\n    }\n}","import React from 'react';\nimport AppBoard from \"./model/AppBoard\";\n\nclass App extends React.Component {\n    public canvasWrapper: any = null;\n    public board: any;\n    constructor(props: any) {\n        super(props);\n        this.collapseHandler = this.collapseHandler.bind(this);\n    }\n\n    componentDidMount() {\n        const board = new AppBoard(document.createElement('canvas'));\n        board.setSettings(1000, 500);\n        this.canvasWrapper.appendChild(board.canvas);\n        this.board = board;\n    }\n\n    collapseHandler(e: React.MouseEvent) {\n        e.preventDefault();\n        this.board.collapseHandler();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div\n                    className=\"container\"\n                    ref={(node)=>this.canvasWrapper=node}\n                />\n                <button className=\"collapse-btn\" onClick={this.collapseHandler}>\n                    Collapse lines\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}